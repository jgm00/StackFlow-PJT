{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useConfig } from \".\";\nconst initialState = {\n  userInput: {\n    categoryGroup: \"\",\n    categoryCode: \"\",\n    colorCode: \"\",\n    size: \"\",\n    input: \"\"\n  },\n  selectOptions: []\n};\nconst filterSlice = createSlice({\n  name: \"filter\",\n  initialState,\n  reducers: {\n    setUserInput: (state, action) => {\n      state.userInput = {\n        ...state.userInput,\n        ...action.payload\n      };\n    },\n    setSelectOptions: (state, action) => {\n      state.selectOptions = action.payload;\n    }\n  }\n});\nexport const {\n  setUserInput,\n  setSelectOptions\n} = filterSlice.actions;\nexport const fetchSelectOptions = () => async (dispatch, getState) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/api/rt/all`, {\n      withCredentials: true,\n      headers: {\n        \"X-CSRF-TOKEN\": csrfToken\n      }\n    });\n    dispatch(setSelectOptions(response.data)); // 데이터 저장\n  } catch (err) {\n    console.error(\"Error fetching select options:\", err);\n  }\n};\nexport default filterSlice.reducer;","map":{"version":3,"names":["createSlice","axios","useConfig","initialState","userInput","categoryGroup","categoryCode","colorCode","size","input","selectOptions","filterSlice","name","reducers","setUserInput","state","action","payload","setSelectOptions","actions","fetchSelectOptions","dispatch","getState","response","get","BASE_URL","withCredentials","headers","csrfToken","data","err","console","error","reducer"],"sources":["/Users/seohyeonseog/Desktop/Seo-Hyunseok/Project/StackFlow-PJT/FRONT/stackflow/src/store/filterSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { useConfig } from \".\";\n\nconst initialState = {\n  userInput: {\n    categoryGroup: \"\",\n    categoryCode: \"\",\n    colorCode: \"\",\n    size: \"\",\n    input: \"\",\n  },\n  selectOptions: [],\n};\n\nconst filterSlice = createSlice({\n  name: \"filter\",\n  initialState,\n  reducers: {\n    setUserInput: (state, action) => {\n      state.userInput = { ...state.userInput, ...action.payload };\n    },\n    setSelectOptions: (state, action) => {\n      state.selectOptions = action.payload;\n    },\n  },\n});\n\nexport const { setUserInput, setSelectOptions } = filterSlice.actions;\n\nexport const fetchSelectOptions = () => async (dispatch, getState) => {\n  \n  try {\n    const response = await axios.get(`${BASE_URL}/api/rt/all`, {\n      withCredentials: true,\n      headers: {\n        \"X-CSRF-TOKEN\": csrfToken,\n      },\n    });\n    dispatch(setSelectOptions(response.data)); // 데이터 저장\n  } catch (err) {\n    console.error(\"Error fetching select options:\", err);\n  }\n};\n\nexport default filterSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,GAAG;AAE7B,MAAMC,YAAY,GAAG;EACnBC,SAAS,EAAE;IACTC,aAAa,EAAE,EAAE;IACjBC,YAAY,EAAE,EAAE;IAChBC,SAAS,EAAE,EAAE;IACbC,IAAI,EAAE,EAAE;IACRC,KAAK,EAAE;EACT,CAAC;EACDC,aAAa,EAAE;AACjB,CAAC;AAED,MAAMC,WAAW,GAAGX,WAAW,CAAC;EAC9BY,IAAI,EAAE,QAAQ;EACdT,YAAY;EACZU,QAAQ,EAAE;IACRC,YAAY,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/BD,KAAK,CAACX,SAAS,GAAG;QAAE,GAAGW,KAAK,CAACX,SAAS;QAAE,GAAGY,MAAM,CAACC;MAAQ,CAAC;IAC7D,CAAC;IACDC,gBAAgB,EAAEA,CAACH,KAAK,EAAEC,MAAM,KAAK;MACnCD,KAAK,CAACL,aAAa,GAAGM,MAAM,CAACC,OAAO;IACtC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH,YAAY;EAAEI;AAAiB,CAAC,GAAGP,WAAW,CAACQ,OAAO;AAErE,OAAO,MAAMC,kBAAkB,GAAGA,CAAA,KAAM,OAAOC,QAAQ,EAAEC,QAAQ,KAAK;EAEpE,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMtB,KAAK,CAACuB,GAAG,CAAC,GAAGC,QAAQ,aAAa,EAAE;MACzDC,eAAe,EAAE,IAAI;MACrBC,OAAO,EAAE;QACP,cAAc,EAAEC;MAClB;IACF,CAAC,CAAC;IACFP,QAAQ,CAACH,gBAAgB,CAACK,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;EAC7C,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEF,GAAG,CAAC;EACtD;AACF,CAAC;AAED,eAAenB,WAAW,CAACsB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}