# StackFlow-PJT main workflow
name: StackFlow-PJT CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # JDK 17 설치
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # gradlew 존재 유무 확인
      - name: List project directory
        run: ls -alh

      # Gradle Build를 위한 권한 부여
      - name: Grant execute permission for gradlew
        run: |
          cd ./BACK
          chmod +x ./gradlew

      # Gradle Build(test 제외)
      - name: Build with Gradle
        run: |
          cd ./BACK
          ./gradlew clean bootJar --exclude-task test

      # DockerHub 로그인
      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 🛠️ **Docker Buildx 설정**
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 🛠️ **Docker 이미지 빌드 및 푸시 (buildx 사용)**
      - name: Build and Push Docker Image
        run: |
          docker buildx build --platform linux/amd64 \
          -f ./BACK/Dockerfile \
          -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }} \
          --push ./BACK

      # EC2 인스턴스 접속 및 애플리케이션 실행
      - name: Application Run
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            echo "Stopping existing container..."
            sudo docker kill ${{ secrets.PROJECT_NAME }} || true
            sudo docker rm -f ${{ secrets.PROJECT_NAME }} || true

            echo "Removing existing image..."
            sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }} || true

            echo "Pulling new image..."
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}

            echo "Running new container..."
            sudo docker run -p ${{ secrets.PORT }}:${{ secrets.PORT }} \
            --name ${{ secrets.PROJECT_NAME }} \
            -d ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.PROJECT_NAME }}

            echo "Done"
